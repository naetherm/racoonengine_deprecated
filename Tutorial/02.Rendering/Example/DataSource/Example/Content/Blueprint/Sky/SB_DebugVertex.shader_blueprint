// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN_VERTEX
	INPUT_VERTEX_POSITION(0, float3, Position)	// Object space vertex position
INPUT_END_VERTEX
OUTPUT_BEGIN_VERTEX
	OUTPUT_TEXTURE_COORDINATE(1, float3, TexCoordVS, 0)	// Texture coordinate
	OUTPUT_POSITION			 (0)						// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END_VERTEX

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToViewSpaceMatrix[2];
	float4x4 ViewSpaceToClipSpaceMatrix[2];
	float4   HosekWilkieSkyCoefficients1[4];
	float4   HosekWilkieSkyCoefficients2[4];
	float3   WorldSpaceSunlightDirection;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_VERTEX
	// Rotate into view-space, centered on the camera
	float3 viewSpacePosition = (MATRIX_MUL(CAST_TO(PassData.WorldSpaceToViewSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float3x3), MAIN_INPUT(Position))).xyz;

	// Transform to clip-space
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.ViewSpaceToClipSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float4(viewSpacePosition, 1.0f));

	// Pass through the object space position as texture coordinate
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(Position);
MAIN_END_VERTEX(MAIN_OUTPUT_POSITION)
