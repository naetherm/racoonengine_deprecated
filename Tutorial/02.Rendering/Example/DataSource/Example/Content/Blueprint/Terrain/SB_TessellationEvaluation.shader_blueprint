// Copyright (c) 2019 - 2022 RacoonStudios

// This software contains source code provided by NVIDIA Corporation. The height map terrain tessellation implementation is basing on "DirectX 11 Terrain Tessellation" by Iain Cantlay ( https://developer.nvidia.com/sites/default/files/akamai/gamedev/files/sdk/11/TerrainTessellation_WhitePaper.pdf ) and the concrete implementation "TerrainTessellation"-sample inside "NVIDIA Direct3D SDK 11" ( https://developer.nvidia.com/dx11-samples ).


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(./SP_Terrain.asset)
	@insertpiece(DefineTerrainPassDataStruct)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Per patch input
INPUT_BEGIN_PATCH
	INPUT_TESS_LEVEL_INNER(2)	// Inner tessellation level
	INPUT_TESS_LEVEL_OUTER(4)	// Outer tessellation level
	DECLARE_TESS_COORD(float2)
INPUT_END_PATCH

// Per patch control point input / output
INPUT_BEGIN
	INPUT_POSITION(0, float4, INPUT_ARRAY(PositionTC))	// World space control point position of the patch we received from the tessellation control shader (TCS) as input
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 					  0)	// Texture coordinate
	OUTPUT_TEXTURE_COORDINATE(2, float3, PreviousClipSpacePositionVS, 1)	// Previous clip space position
	OUTPUT_TEXTURE_COORDINATE(3, float3, WorldSpacePosition, 		  2)	// World space position
	OUTPUT_POSITION			 (0)											// Interpolated world space vertex position inside the patch as output
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	TerrainPassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(2, 0, HeightMap, 1)

// Samplers
SAMPLER_STATE(3, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
// From shader piece "./SP_Terrain.asset"
	@insertpiece(DefineWorldXZToHeightUV)
	@insertpiece(DefineSampleHeightMap)

float4 Bilerp(float4 v0, float4 v1, float4 v2, float4 v3, float2 i)
{
	float4 bottom = LERP(v0, v3, i.x);
	float4 top    = LERP(v1, v2, i.x);
	return LERP(bottom, top, i.y);
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
@property(HLSL)
	[domain("quad")]
@end
@property(GLSL && Vulkan)
	layout(quads, fractional_even_spacing, cw) in;
@end
@property(GLSL && !Vulkan)
	layout(quads, fractional_even_spacing, ccw) in;	// Not "cw" by intent
@end
MAIN_BEGIN_TESSELLATION_EVALUATION(4)
	// Bilerp the position
	float4 worldSpacePosition = Bilerp(MAIN_INPUT_ARRAY(PositionTC, 0), MAIN_INPUT_ARRAY(PositionTC, 1), MAIN_INPUT_ARRAY(PositionTC, 2), MAIN_INPUT_ARRAY(PositionTC, 3), TESS_COORD.xy);
	worldSpacePosition.w = 1.0f;

	// Apply height map
	worldSpacePosition.y = SampleHeightMap(worldSpacePosition.xz);

	// Transform to clip-space
	// -> Take care of camera relative rendering
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToClipSpaceMatrix, float4(worldSpacePosition.xyz - PassData.UnmodifiedWorldSpaceCameraPosition, 1.0f));

	// Texture coordinate
	MAIN_OUTPUT(TexCoord) = WorldXZToHeightUV(worldSpacePosition.xz);

	{ // Previous clip space position
	  // -> Take care of camera relative rendering
		float4 previousViewSpacePosition = MATRIX_MUL(PassData.PreviousWorldSpaceToViewSpaceMatrix, float4(worldSpacePosition.xyz - PassData.UnmodifiedWorldSpaceCameraPosition, 1.0f));
		MAIN_OUTPUT(PreviousClipSpacePositionVS) = MATRIX_MUL(PassData.ViewSpaceToClipSpaceMatrix, previousViewSpacePosition).xyw;
	}

	// World space position
	MAIN_OUTPUT(WorldSpacePosition) = worldSpacePosition.xyz;
MAIN_END
