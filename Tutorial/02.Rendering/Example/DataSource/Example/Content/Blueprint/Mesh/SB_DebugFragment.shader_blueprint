// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Define pieces                                         ]
//[-------------------------------------------------------]
// TODO(co) Define this outside
@piece(MaximumNumberOfMaterials)2@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	NOINTERPOLATION_INTERPOLATION_MODIFIER INPUT_TEXTURE_COORDINATE(1, uint,   MaterialSlotVS, 0)	// The assigned material slot inside the material uniform buffer
										   INPUT_TEXTURE_COORDINATE(2, float2, TexCoordVS,	   1)	// Texture coordinate
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct Material
{
	float3 AlbedoColor;
};
UNIFORM_BUFFER_BEGIN(1, 0, MaterialUniformBuffer, 1)
	Material Materials[FAST_SHADER_BUILD_HACK(@insertpiece(MaximumNumberOfMaterials))];
UNIFORM_BUFFER_END

// Textures: We need to start at texture unit 1 instead of texture unit 0 because the vertex shader has an instance texture buffer bound at texture unit 0 (OpenGL shares those bindings across all shader stages while Direct3D doesn't)
TEXTURE_2D(3, 0, _argb_nxa, 1)	// RGB channel = Albedo map ("_a"-postfix), A channel = x component of normal map ("_n"-postfix)

// Samplers
SAMPLER_STATE(4, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Color.asset)
	@insertpiece(DefineLinearSpaceToGammaSpace3)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the used material
	Material material = Materials[MAIN_INPUT(MaterialSlotVS)];

	// Diffuse term
	// -> Usually we're using sRGB textures, so textures might already be loaded in this format when switching to the debug compositor, convert back from linear space to gamma space
	float3 color = material.AlbedoColor * LinearSpaceToGammaSpace3(SAMPLE_2D(_argb_nxa, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb);

	// Done
	MAIN_OUTPUT_COLOR(0) = min(float4(color, 1.0f), float4(1.0f, 1.0f, 1.0f, 1.0f));
MAIN_END
