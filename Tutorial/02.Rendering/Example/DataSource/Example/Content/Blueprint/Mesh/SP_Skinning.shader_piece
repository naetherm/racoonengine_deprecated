// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
/*
// Linear blend skinning (LBS) using matrices; there's no runtime switch by intent since dual quaternion skinning (DQS) is the way to go, don't remove this reference comment
@piece(PerformGpuSkinning)
	// Get GPU skinning matrix
	float4 gpuSkinningMatrix[3];
	{
		uint textureBufferIndex = instanceIndices.x + 3u;

		// First bone
		uint textureBufferBoneOffset = textureBufferIndex + uint(MAIN_INPUT(BlendIndices)[0]) * 3u;
		float blendWeight = float(MAIN_INPUT(BlendWeights)[0]) / 255.0f;	// 8 bit bone weights decoding
		gpuSkinningMatrix[0] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * blendWeight;
		gpuSkinningMatrix[1] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * blendWeight;
		gpuSkinningMatrix[2] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * blendWeight;

		// The other bones
		UNROLL for (int i = 1; i < 4; ++i)
		{
			textureBufferBoneOffset = textureBufferIndex + uint(MAIN_INPUT(BlendIndices)[i]) * 3u;
			blendWeight = float(MAIN_INPUT(BlendWeights)[i]) / 255.0f;	// 8 bit bone weights decoding
			gpuSkinningMatrix[0] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * blendWeight;
			gpuSkinningMatrix[1] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * blendWeight;
			gpuSkinningMatrix[2] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * blendWeight;
		}
	}

	// Transform position
	objectSpacePosition = float3(dot(gpuSkinningMatrix[0], float4(objectSpacePosition, 1.0f)), dot(gpuSkinningMatrix[1], float4(objectSpacePosition, 1.0f)), dot(gpuSkinningMatrix[2], float4(objectSpacePosition, 1.0f)));
@end
*/

// The dual quaternion skinning (DQS) implementation is basing on https://gamedev.stackexchange.com/questions/164423/help-with-dual-quaternion-skinning
@piece(PerformGpuSkinning)
	// Get GPU skinning matrix
	float4 gpuSkinningMatrix[3];
	{
		// 8 bit bone weights decoding
		float4 blendWeights = float4(MAIN_INPUT(BlendWeights)) / float4(255.0f, 255.0f, 255.0f, 255.0f);
		float blendWeightsSum = blendWeights.x + blendWeights.y + blendWeights.z + blendWeights.w;

		// Get bone dual quaternions
		uint textureBufferIndex = instanceIndices.x + 3u;
		uint textureBufferBoneOffset;
		#define FETCH_BONE_DUAL_QUATERNION(dualQuaternion, blendIndex) \
			textureBufferBoneOffset = textureBufferIndex + uint(MAIN_INPUT(BlendIndices)[blendIndex]) * 2u; \
			float2x4 dualQuaternion = float2x4(TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u), TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u))
		FETCH_BONE_DUAL_QUATERNION(dualQuaternion0, 0);
		FETCH_BONE_DUAL_QUATERNION(dualQuaternion1, 1);
		FETCH_BONE_DUAL_QUATERNION(dualQuaternion2, 2);
		FETCH_BONE_DUAL_QUATERNION(dualQuaternion3, 3);
		#undef FETCH_BONE_DUAL_QUATERNION

		// Antipodality correction: Ensure all bone transforms are in the same neighbourhood
		blendWeights.y *= sign(dot(dualQuaternion0[0], dualQuaternion1[0]));
		blendWeights.z *= sign(dot(dualQuaternion0[0], dualQuaternion2[0]));
		blendWeights.w *= sign(dot(dualQuaternion0[0], dualQuaternion3[0]));

		// Blend dual quaternions
		float2x4 blendedDualQuaternion = blendWeights.x * dualQuaternion0 + blendWeights.y * dualQuaternion1 + blendWeights.z * dualQuaternion2 + blendWeights.w * dualQuaternion3;
		blendedDualQuaternion[0][3] += float(blendWeightsSum < 1.0f) * (1.0f - blendWeightsSum);
		blendedDualQuaternion = blendedDualQuaternion / length(blendedDualQuaternion[0]);

		// Dual quaternion to matrix
		float4 dualQuaternionRotation = blendedDualQuaternion[0];
		float4 dualQuaternionTranslation = blendedDualQuaternion[1];
		gpuSkinningMatrix[0] = float4(1.0 - (2.0 * dualQuaternionRotation.y * dualQuaternionRotation.y) - (2.0 * dualQuaternionRotation.z * dualQuaternionRotation.z),
									  (2.0 * dualQuaternionRotation.x * dualQuaternionRotation.y) - (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.z),
									  (2.0 * dualQuaternionRotation.x * dualQuaternionRotation.z) + (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.y),
									  2.0 * (-dualQuaternionTranslation.w * dualQuaternionRotation.x + dualQuaternionTranslation.x * dualQuaternionRotation.w - dualQuaternionTranslation.y * dualQuaternionRotation.z + dualQuaternionTranslation.z * dualQuaternionRotation.y));
		gpuSkinningMatrix[1] = float4((2.0 * dualQuaternionRotation.x * dualQuaternionRotation.y) + (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.z),
									  1.0 - (2.0 * dualQuaternionRotation.x * dualQuaternionRotation.x) - (2.0 * dualQuaternionRotation.z * dualQuaternionRotation.z),
									  (2.0 * dualQuaternionRotation.y * dualQuaternionRotation.z) - (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.x),
									  2.0 * (-dualQuaternionTranslation.w * dualQuaternionRotation.y + dualQuaternionTranslation.x * dualQuaternionRotation.z + dualQuaternionTranslation.y * dualQuaternionRotation.w - dualQuaternionTranslation.z * dualQuaternionRotation.x));
		gpuSkinningMatrix[2] = float4((2.0 * dualQuaternionRotation.x * dualQuaternionRotation.z) - (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.y),
									  (2.0 * dualQuaternionRotation.y * dualQuaternionRotation.z) + (2.0 * dualQuaternionRotation.w * dualQuaternionRotation.x),
									  1.0 - (2.0 * dualQuaternionRotation.x * dualQuaternionRotation.x) - (2.0 * dualQuaternionRotation.y * dualQuaternionRotation.y),
									  2.0 * (-dualQuaternionTranslation.w * dualQuaternionRotation.z - dualQuaternionTranslation.x * dualQuaternionRotation.y + dualQuaternionTranslation.y * dualQuaternionRotation.x + dualQuaternionTranslation.z * dualQuaternionRotation.w));
	}

	// Transform position
	objectSpacePosition = float3(dot(gpuSkinningMatrix[0], float4(objectSpacePosition, 1.0f)), dot(gpuSkinningMatrix[1], float4(objectSpacePosition, 1.0f)), dot(gpuSkinningMatrix[2], float4(objectSpacePosition, 1.0f)));
@end
