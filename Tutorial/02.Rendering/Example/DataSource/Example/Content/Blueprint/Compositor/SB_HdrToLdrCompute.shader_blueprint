// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_GLOBAL_INVOCATION_ID
INPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 LensStarMatrix;
	uint3	 GlobalComputeSize;
	float 	 ToneMapKeyValue;
	float 	 BloomIntensity;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
TEXTURE_2D(1, 1, DistortionMap, 1)
TEXTURE_2D(1, 2, LuminanceMap, 2)
TEXTURE_2D(1, 3, BloomMap, 3)
TEXTURE_2D(1, 4, DirtyLensMap, 4)
@property(UseLensFlareMap)
	TEXTURE_2D(1, 5, LensFlareMap, 5)
	TEXTURE_2D(1, 6, LensStarMap, 6)
@end
RW_TEXTURE_2D(1, 7, OutputTexture2D, 7, rgba8, writeonly)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Color.asset)
	@insertpiece(DefineColorToLuminance)
	@insertpiece(DefineCalculateExposedColor)

// Apply the filmic curve from John Hable's presentation
float3 ToneMapFilmicAlu(float3 color)
{
	color = max(float3(0.0f, 0.0f, 0.0f), color - 0.004f);
	color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f) + 0.06f);

	// Result has 1 / 2.2 baked in
	return pow(color, float3(2.2f, 2.2f, 2.2f));
}

// Apply exposure and tone mapping to the specific color, apply the threshold to the exposure value
float3 ToneMap(float3 color, float averageLuminance, float threshold, out float exposure)
{
	color = CalculateExposedColor(color, averageLuminance, PassData.ToneMapKeyValue, threshold, exposure);
	color = ToneMapFilmicAlu(color);
	return color;
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_COMPUTE(32, 32, 1)
	// Compute dispatch is using groups of a multiple of the local size, ensure we don't access out of global compute size which mustn't be a multiple of the local size and hence might be smaller
	BRANCH if (GLOBAL_INVOCATION_ID.x < PassData.GlobalComputeSize.x && GLOBAL_INVOCATION_ID.y < PassData.GlobalComputeSize.y)
	{
		// Get texture coordinate and distortion
		float4 texCoord = float4((CAST_TO(GLOBAL_INVOCATION_ID.xy, float2) + float2(0.5f, 0.5f)) / CAST_TO(PassData.GlobalComputeSize.xy, float2), 0.0f, 0.0f);
		int3 distortedTexCoord = CAST_TO(GLOBAL_INVOCATION_ID, int3) + int3(CAST_TO(SAMPLE_2D_LOD(DistortionMap, SamplerLinear, texCoord).rg, int2), 0);
		distortedTexCoord = max(int3(0, 0, 0), distortedTexCoord);
		distortedTexCoord = min(distortedTexCoord, CAST_TO(PassData.GlobalComputeSize.xyz - uint3(1, 1, 0), int3));

		// Get color and average luminance
		float4 color = TEXTURE_FETCH_2D(ColorMap, distortedTexCoord);
		float averageLuminance = TEXTURE_FETCH_2D(LuminanceMap, int3(0, 0, 0)).r;	// TODO(co) Possible optimization: Each thread group needs to fetch this value just once

		// Get dirty lens value
		float3 dirtyLens = SAMPLE_2D_LOD(DirtyLensMap, SamplerLinear, texCoord).rgb;

		{ // Tone map
			float exposure = 0.0f;
			color.rgb = ToneMap(color.rgb, averageLuminance, 0.0f, exposure);
		}

		@property(UseLensFlareMap)
		{
			// Apply the lens flare with dirty lens
			float lensFlareIntensity = 0.1f;
			float3 lensFlare = SAMPLE_2D_LOD(LensFlareMap, SamplerLinear, texCoord).rgb;
			float2 lensStarTexcoord = (MATRIX_MUL(float3(texCoord.xy, 1.0f), CAST_TO(PassData.LensStarMatrix, float3x3))).xy;
			color.rgb += lensFlare * lensFlareIntensity;
			color.rgb += lensFlare * SAMPLE_2D_LOD(LensStarMap, SamplerLinear, float4(lensStarTexcoord, 0.0f, 0.0f)).rgb * 10.0f;
		}
		@end

		{ // Apply the bloom with dirty lens
			float3 bloom = SAMPLE_2D_LOD(BloomMap, SamplerLinear, texCoord).rgb;
			color.rgb += bloom * PassData.BloomIntensity + bloom * PassData.BloomIntensity * dirtyLens;
		}

		// Done, ensure we're in a 0..1 range
		IMAGE_STORE(OutputTexture2D, CAST_TO(GLOBAL_INVOCATION_ID.xy, int2), float4(SATURATE(color.rgb), color.a));
	}
MAIN_END_NO_OUTPUT
