// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_GLOBAL_INVOCATION_ID
INPUT_END

// Uniform buffers
struct PassDataStruct
{
	uint3 GlobalComputeSize;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
RW_TEXTURE_2D(1, 1, OutputTexture2D, 1, r11f_g11f_b10f, writeonly)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_COMPUTE(32, 32, 1)
	// Compute dispatch is using groups of a multiple of the local size, ensure we don't access out of global compute size which mustn't be a multiple of the local size and hence might be smaller
	// -> The Gaussian blur implementation is basing on http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
	BRANCH if (GLOBAL_INVOCATION_ID.x < PassData.GlobalComputeSize.x && GLOBAL_INVOCATION_ID.y < PassData.GlobalComputeSize.y)
	{
		// Constants
		float offset[3];
		offset[0] = 0.0f;
		offset[1] = 1.3846153846f;
		offset[2] = 3.2307692308f;
		float weight[3];
		weight[0] = 0.227027027f;
		weight[1] = 0.3162162162f;
		weight[2] = 0.0702702703f;

		// Gather values
		float2 texCoord = (CAST_TO(GLOBAL_INVOCATION_ID.xy, float2) + float2(0.5f, 0.5f)) / CAST_TO(PassData.GlobalComputeSize.xy, float2);
		float4 color = SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord, 0.0f, 0.0f)) * weight[0];
		float2 inverseColorMapSize = float2(1.0f, 1.0f) / CAST_TO(GET_TEXTURE_2D_LOD_SIZE(ColorMap, 0), float2);	// TODO(co) Possible optimization: Each thread group needs to fetch this value just once
		UNROLL for (int i = 1; i < 3; ++i)
		{
			@property(VerticalBlur)
				float2 texelOffset = float2(offset[i], 0.0f) * inverseColorMapSize;
			@else
				float2 texelOffset = float2(0.0f, offset[i]) * inverseColorMapSize;
			@end
			color += SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord + texelOffset, 0.0f, 0.0f)) * weight[i];
			color += SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord - texelOffset, 0.0f, 0.0f)) * weight[i];
		}

		// Done
		IMAGE_STORE(OutputTexture2D, CAST_TO(GLOBAL_INVOCATION_ID.xy, int2), color);
	}
MAIN_END_NO_OUTPUT
