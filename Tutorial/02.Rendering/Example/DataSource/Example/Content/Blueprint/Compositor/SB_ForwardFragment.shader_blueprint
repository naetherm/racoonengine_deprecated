// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4 ViewSpaceFrustumCorners[4];
	float3 ViewSpaceSunlightDirection;
	float  AtmosphereFogDensity;
	float3 AmbientColor;
	float3 SunlightColor;
	float3 DiffuseFogColor;
	float2 ViewportSize;
	float2 ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
TEXTURE_2D(1, 1, DepthMap, 1)
TEXTURE_2D(1, 2, ScreenSpaceAmbientOcclusionMap, 2)
TEXTURE_2D(1, 3, VolumetricLightMap, 3)
TEXTURE_2D(1, 4, ReflectionMap, 4)
TEXTURE_2D(1, 5, SpecularMap, 5)

// Samplers
SAMPLER_STATE(2, 0, SamplerPointClamp, 0)
SAMPLER_STATE(2, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Color.asset)
	@insertpiece(DefineCalculateFoggedColor)
@includepiece(../Shared/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepth)

// Upscale volumetric light/fog using bilateral upsampling (aka "nearest depth up-sampling")
// -> The implementation is basing on "Volumetric lights" by Alexandre Pestana ( http://www.alexandre-pestana.com/volumetric-lights/ )
float3 VolumetricLightBilateralUpsampling(uint2 coordinate, float2 screenSpacePosition, float upSampledDepth)
{
	float3 color = float3(0.0f, 0.0f, 0.0f);
	float totalWeight = 0.0f;

	// Select the closest downscaled pixels
	float xOffset = (((coordinate.x % 2u) == 0) ? -1.0f : 1.0f) / PassData.ViewportSize.x;
	float yOffset = (((coordinate.y % 2u) == 0) ? -1.0f : 1.0f) / PassData.ViewportSize.y;
	float2 offset[4];
	offset[0] = float2(0.0f, 0.0f);
	offset[1] = float2(0.0f, yOffset);
	offset[2] = float2(xOffset, 0.0f);
	offset[3] = float2(xOffset, yOffset);
	UNROLL for (int i = 0; i < 4; ++i)
	{
		float3 downscaledColor = SAMPLE_2D_LOD(VolumetricLightMap, SamplerLinearClamp, float4(screenSpacePosition + offset[i], 0.0f, 0.0f)).rgb;
		float downscaledDepth = SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, float4(screenSpacePosition + offset[i], 0.0f, 1.0f));
		float currentWeight = 1.0f;
		currentWeight *= max(0.0f, 1.0f - 0.05f * abs(downscaledDepth - upSampledDepth));
		color += downscaledColor * currentWeight;
		totalWeight += currentWeight;
	}

	// Done
	return color / (totalWeight + 0.0001f);
}

float3 CalculateColor(float3 viewRay, float3 color, float screenSpaceAmbientOcclusion, float2 screenSpacePosition)
{
	// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
	float depth = SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, float4(screenSpacePosition, 0.0f, 0.0f));
	BRANCH if (1.0f != depth)
	{
		// Scale the view ray by the ratio of the linear z value to the projected view ray
		// -> For details see "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
		float3 viewSpacePosition = viewRay * (GetLinearDepth(depth) / dot(float3(0.0f, 0.0f, 1.0f), viewRay));

		// Apply reflection color
		uint2 coordinate = CAST_TO(screenSpacePosition * PassData.ViewportSize, uint2);
		color = LERP(color, TEXTURE_FETCH_2D(ReflectionMap, int3(coordinate, 0)).rgb, TEXTURE_FETCH_2D(SpecularMap, int3(coordinate, 0)).rgb);

		// Calculate fogged color
		float3 foggedColor = CalculateFoggedColor(viewSpacePosition, color * screenSpaceAmbientOcclusion, PassData.AtmosphereFogDensity, PassData.ViewSpaceSunlightDirection, PassData.AmbientColor, PassData.SunlightColor, PassData.DiffuseFogColor);

		// Apply volumetric light
		foggedColor += VolumetricLightBilateralUpsampling(coordinate, screenSpacePosition, depth);

		// Done
		return foggedColor;
	}
	else
	{
		// Sky
		return color;
	}
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get texture coordinate
	float2 texCoord = MAIN_INPUT(TexCoordVS);

	// Get color and screen space ambient occlusion value
	float3 color = SAMPLE_2D_LOD(ColorMap, SamplerPointClamp, float4(texCoord, 0.0f, 0.0f)).rgb;
	float screenSpaceAmbientOcclusion = SAMPLE_2D_LOD(ScreenSpaceAmbientOcclusionMap, SamplerLinearClamp, float4(texCoord, 0.0f, 0.0f)).r;

	// Get the normalized view ray
	float3 viewRay = normalize(MAIN_INPUT(ViewRayVS));

	// Calculate fragment color
	float3 finalColor = CalculateColor(viewRay, color, screenSpaceAmbientOcclusion, texCoord);

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(finalColor, 1.0f);
MAIN_END
