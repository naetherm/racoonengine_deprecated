// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_ID
INPUT_END
OUTPUT_BEGIN
										   OUTPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)				// Texture coordinate
	NOINTERPOLATION_INTERPOLATION_MODIFIER OUTPUT_TEXTURE_COORDINATE(2, float2, InverseTextureSize0VS, 1)	// Inverse texture size 0
										   OUTPUT_POSITION			(0)										// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Textures
TEXTURE_2D(0, 0, ColorMap, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Clip space vertex positions of the full screen triangle, left/bottom is (-1,-1) and right/top is (1,1)
	//								Vertex ID	Triangle on screen
	//	-1.0f,  1.0f, 0.0f, 0.0f,	0			  0.......1
	//	 3.0f,  1.0f, 2.0f, 0.0f,	1			  .   .
	//	-1.0f, -3.0f, 0.0f, 2.0f	2			  2
	// For background information about the attribute-less fullscreen triangle rendering see "An interesting vertex shader trick" by Cort Stratton
	// talking about the vertex shader of Timothy Lottes' Fast Approximate Anti-Aliasing algorithm (FXAA) - https://web.archive.org/web/20140719063725/http://www.altdev.co/2011/08/08/interesting-vertex-shader-trick/#sthash.yVnXrYGi.dpuf

	// Transform the object space vertex into clip space
	MAIN_OUTPUT_POSITION = float4(CAST_TO(MAIN_INPUT_VERTEX_ID % 2, float) * 4.0f - 1.0f, CAST_TO(MAIN_INPUT_VERTEX_ID / 2, float) * 4.0f - 1.0f, 0.0f, 1.0f);
	@property(!UpperLeftOrigin)
		MAIN_OUTPUT_POSITION.y = -MAIN_OUTPUT_POSITION.y;
	@end

	// Pass through the texture coordinates
	MAIN_OUTPUT(TexCoordVS) = float2(CAST_TO(MAIN_INPUT_VERTEX_ID % 2, float) * 2.0f, 1.0f - CAST_TO(MAIN_INPUT_VERTEX_ID / 2, float) * 2.0f);

	// Pass through the inverse texture size 0
	// Background: Modern shader languages provide functionality to get the texture size. See e.g.
	// - HLSL "GetDimensions()" ( https://msdn.microsoft.com/de-de/library/windows/desktop/bb509693(v=vs.85).aspx )
	// - GLSL "textureSize()" ( https://www.opengl.org/sdk/docs/man4/html/textureSize.xhtml )
	// On the other hand, there are indications that usage of this functionality is not recommenced performance wise. See e.g.
	// - http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/05/GCNPerformanceTweets.pdf
	// - http://www.gamedev.net/topic/605580-performance-comparison-hlsl-texturegetdimension/
	// So, you might want to perform this inside the vertex shader and then pass the result into the fragment shader (except the vertex shader is your bottleneck).
	MAIN_OUTPUT(InverseTextureSize0VS) = float2(1.0f, 1.0f) / CAST_TO(GET_TEXTURE_2D_LOD_SIZE(ColorMap, 0), float2);
MAIN_END
