// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float3 CurrentShadowCascadeScale;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(1, 0, DepthMap, @value(NumberOfMultisamples), 0)
@else
	TEXTURE_2D(1, 0, DepthMap, 0)
@end


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_ExponentialShadow.asset)
	@insertpiece(DefineExponentialShadow)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Basing on https://mynameismjp.wordpress.com/2013/09/10/shadow-maps/ - https://github.com/TheRealMJP/Shadows
	float2 exponents = GetEvsmExponents(PassData.CurrentShadowCascadeScale);
	@property(NumberOfMultisamples)
		float sampleWeight = 1.0f / float(@value(NumberOfMultisamples));
		float4 average = float4(0.0f, 0.0f, 0.0f, 0.0f);

		// Custom MSAA resolve
		UNROLL for (int i = 0; i < @value(NumberOfMultisamples); ++i)
		{
			// Convert to EVSM representation
			float depth = REVERSED_Z(SAMPLE_2D_MS(DepthMap, int2(FRAGMENT_POSITION.xy), i).r);
			float2 warpedDepth = WarpDepth(depth, exponents);
			average += sampleWeight * float4(warpedDepth.xy, warpedDepth.xy * warpedDepth.xy);
		}
	@else
		float depth = REVERSED_Z(TEXTURE_FETCH_2D(DepthMap, int3(int2(FRAGMENT_POSITION.xy), 0)).r);
		float2 warpedDepth = WarpDepth(depth, exponents);
		float4 average = float4(warpedDepth.xy, warpedDepth.xy * warpedDepth.xy);
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = average;
MAIN_END
