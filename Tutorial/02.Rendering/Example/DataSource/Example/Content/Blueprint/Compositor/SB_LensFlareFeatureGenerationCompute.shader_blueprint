// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_GLOBAL_INVOCATION_ID
INPUT_END

// Uniform buffers
struct PassDataStruct
{
	int   NumberOfGhostSamples;
	float GhostDispersalFactor;
	float ChromaticDistortion;
	float HaloWidth;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
TEXTURE_1D(1, 1, LensColorMap, 1)
RW_TEXTURE_2D(1, 2, OutputTexture2D, 2, r11f_g11f_b10f, writeonly)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)
SAMPLER_STATE(2, 1, SamplerPoint, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
float3 GetDistortedTexture(float2 texCoord, float2 direction, float3 distortion)
{
	return float3(
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord + direction * distortion.r, 0.0f, 0.0f)).r,
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord + direction * distortion.g, 0.0f, 0.0f)).g,
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(texCoord + direction * distortion.b, 0.0f, 0.0f)).b
	);
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_COMPUTE(32, 32, 1)
	// Compute dispatch is using groups of a multiple of the local size, in here we don't need to ensure we don't access out of global compute size since our color map must be a multiple of the local size
	// -> Basing on "Pseudo Lens Flare" from John Chapman - http://john-chapman-graphics.blogspot.de/2013/02/pseudo-lens-flare.html
	// -> 256 = fixed global compute size
	float2 texelSize = float2(1.0f, 1.0f) / float2(256.0f, 256.0f);
	float2 texCoord = (CAST_TO(GLOBAL_INVOCATION_ID.xy, float2) + float2(0.5f, 0.5f)) * texelSize;

	float2 ghostVector = (float2(0.5f, 0.5f) - texCoord) * PassData.GhostDispersalFactor;
	float2 normalizedGhostVector = normalize(ghostVector);
	float2 haloVec = normalizedGhostVector * PassData.HaloWidth;

	float3 distortion = float3(-texelSize.x * PassData.ChromaticDistortion, 0.0, texelSize.x * PassData.ChromaticDistortion);
	float halfVectorLength = length(float2(0.5f, 0.5f));

	// Sample ghosts
	float3 result = float3(0.0f, 0.0f, 0.0f);
	LOOP for (int i = 0; i < PassData.NumberOfGhostSamples; ++i)
	{
		float2 offset = frac(texCoord + ghostVector * float(i));

		// Linear falloff
		float weight = SATURATE(length(float2(0.5f, 0.5f) - offset) / halfVectorLength);
		weight = pow(1.0f - weight, 10.0f);

		result += GetDistortedTexture(offset, normalizedGhostVector, distortion) * weight;
	}

	// Tint ghost
	result *= SAMPLE_1D_LOD(LensColorMap, SamplerPoint, float4(length(float2(0.5f, 0.5f) - texCoord) / halfVectorLength, 0.0f, 0.0f, 0.0f)).bgr;

	// Sample halo
	float weight = SATURATE(length(float2(0.5f, 0.5f) - frac(texCoord + haloVec)) / halfVectorLength);
	FLATTEN if (1.0f > weight)
	{
		weight = pow(1.0f - weight, 10.0f);
	}
	result += GetDistortedTexture(frac(texCoord + haloVec), normalize(ghostVector), distortion) * weight;

	// Done
	IMAGE_STORE(OutputTexture2D, CAST_TO(GLOBAL_INVOCATION_ID.xy, int2), float4(result, 1.0f));
MAIN_END_NO_OUTPUT
