// Copyright (c) 2019 - 2022 RacoonStudios

// Uses a lower exposure to produce a value suitable for a bloom pass


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_GLOBAL_INVOCATION_ID
INPUT_END

// Uniform buffers
struct PassDataStruct
{
	float ToneMapKeyValue;
	float BloomThreshold;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
TEXTURE_2D(1, 1, LuminanceMap, 1)
RW_TEXTURE_2D(1, 2, OutputTexture2D, 2, r11f_g11f_b10f, writeonly)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Color.asset)
	@insertpiece(DefineCalculateExposedColor)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_COMPUTE(32, 32, 1)
	// Compute dispatch is using groups of a multiple of the local size, in here we don't need to ensure we don't access out of global compute size since our color map must be a multiple of the local size
	// -> 256 = fixed global compute size
	float3 color = SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4((CAST_TO(GLOBAL_INVOCATION_ID.xy, float2) + float2(0.5f, 0.5f)) / float2(256.0f, 256.0f), 0.0f, 0.0f)).rgb;
	float averageLuminance = TEXTURE_FETCH_2D(LuminanceMap, int3(0, 0, 0)).r;	// TODO(co) Possible optimization: Each thread group needs to fetch this value just once

	// Use a lower exposure to produce a value suitable for a bloom pass
	// -> Tone map it to threshold
	float exposure = 0.0f;
	color = CalculateExposedColor(color, averageLuminance, PassData.ToneMapKeyValue, PassData.BloomThreshold, exposure);
	FLATTEN if (dot(color, float3(0.333f, 0.333f, 0.333f)) <= 0.001f)
	{
		color = float3(0.0f, 0.0f, 0.0f);
	}

	// Done
	IMAGE_STORE(OutputTexture2D, CAST_TO(GLOBAL_INVOCATION_ID.xy, int2), float4(color, 1.0f));
MAIN_END_NO_OUTPUT
