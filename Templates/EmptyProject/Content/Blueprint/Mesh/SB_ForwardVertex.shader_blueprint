// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(./SP_Skinning.asset)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN_VERTEX
	INPUT_VERTEX_POSITION(0, float3, Position)				// Object space vertex position
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 0)		// 32 bit texture coordinate
	INPUT_TEXTURE_COORDINATE(2, int4, QTangent, 1)			// 16 bit QTangent
	INPUT_VERTEX_DRAW_ID(3)									// Draw ID
	@property(UseGpuSkinning)
		INPUT_VERTEX_BLEND_INDICES(4, uint4, BlendIndices)	// 8 bit bone indices
		INPUT_VERTEX_BLEND_WEIGHTS(5, uint4, BlendWeights)	// 8 bit bone weights
	@end
INPUT_END_VERTEX
OUTPUT_BEGIN_VERTEX
	NOINTERPOLATION_INTERPOLATION_MODIFIER OUTPUT_TEXTURE_COORDINATE(1, uint2,  MaterialSlotStereoEyeIndexVS,	0)	// x = The assigned material slot inside the material uniform buffer, y = Stereo eye index
										   OUTPUT_TEXTURE_COORDINATE(2, float2, TexCoordVS,						1)	// Texture coordinate
										   OUTPUT_TEXTURE_COORDINATE(3, float3, TangentFrame0VS,				2)	// Tangent frame
										   OUTPUT_TEXTURE_COORDINATE(4, float3, TangentFrame1VS,				3)	// Tangent frame
										   OUTPUT_TEXTURE_COORDINATE(5, float3, TangentFrame2VS,				4)	// Tangent frame
										   OUTPUT_TEXTURE_COORDINATE(6, float3, WorldSpacePositionVS,			5)	// World space position
										   OUTPUT_TEXTURE_COORDINATE(7, float3, PreviousClipSpacePositionVS,	6)	// Previous clip space position
										   OUTPUT_POSITION			(0)												// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END_VERTEX

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToClipSpaceMatrix[2];
	float4x4 PreviousWorldSpaceToClipSpaceMatrix[2];
	float4x4 ShadowMatrix;
	float4   ShadowCascadeOffsets[4];
	float4   ShadowCascadeScales[4];
	float4   ShadowCascadeSplits;
	float4	 ViewSpaceToWorldSpaceQuaternion[2];
	float4	 WorldSpaceToViewSpaceQuaternion[2];
	float4	 WetSurfaces;	// x=wet level, y=hole/cracks flood level, z=puddle flood level, w=rain intensity
	float3	 WorldSpaceCameraPosition[2];
	float3	 WrappedWorldSpaceCameraPosition;
	float3	 ViewSpaceSunlightDirection;
	float3	 AmbientColor;
	float3	 SunlightColor;
	float3	 LightClustersScale;
	float3	 LightClustersBias;
	uint	 FullCoverageMask;
	float2   ViewportSize;
	float2   ProjectionParametersReversedZ;
	float2   JitterOffset;
	float    GlobalTimeInSeconds;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END
UNIFORM_BUFFER_BEGIN(2, 0, InstanceUniformBuffer, 2)
	// x = The instance texture buffer start index
	// y = The assigned material slot inside the material uniform buffer
	// z = The custom parameters start index inside the instance texture buffer
	// w = Unused
	uint4 InstanceIndicesArray[FAST_SHADER_BUILD_HACK(4096)];	// 64 KiB
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(2, 1, float4, InstanceTextureBuffer, 0)	// "POSITION_ROTATION_SCALE"


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Normal.asset)
	@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_VERTEX
	// Get object space to world space data
	uint4  instanceIndices	  = InstanceIndicesArray[MAIN_INPUT_DRAW_ID_VERTEX];
	float3 position			  = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x).xyz;
	float4 rotationQuaternion = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x + 1u);
	float3 scale			  = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x + 2u).xyz;

	// Get the object space position
	float3 objectSpacePosition = MAIN_INPUT(Position);

	// GPU skinning
	@property(UseGpuSkinning)
		@insertpiece(PerformGpuSkinning)
	@end

	// Calculate the world space vertex position
	float3 worldSpacePosition = MultiplyQuaternionVector(rotationQuaternion, objectSpacePosition * scale) + position;

	// Pass through the world space position
	MAIN_OUTPUT(WorldSpacePositionVS) = worldSpacePosition;

	// Calculate the clip space vertex position, left/bottom is (-1,-1) and right/top is (1,1)
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToClipSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float4(worldSpacePosition, 1.0f));
	MAIN_OUTPUT(PreviousClipSpacePositionVS) = MATRIX_MUL(PassData.PreviousWorldSpaceToClipSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float4(worldSpacePosition, 1.0f)).xyw;
	@property(SinglePassStereoInstancing)
	{
		// Replicate the "MAIN_END_VERTEX(MAIN_OUTPUT_POSITION)" part for the previous clip space position used for velocity calculation
		float StereoEyeOffsetScale[2] = { 0.5f, -0.5f };
		MAIN_OUTPUT(PreviousClipSpacePositionVS).x *= 0.5f;
		MAIN_OUTPUT(PreviousClipSpacePositionVS).x += StereoEyeOffsetScale[MAIN_INPUT_STEREO_EYE_INDEX] * MAIN_OUTPUT(PreviousClipSpacePositionVS).z;
	}
	@end

	// Pass through the assigned material slot inside the material uniform buffer
	MAIN_OUTPUT(MaterialSlotStereoEyeIndexVS) = uint2(instanceIndices.y, MAIN_INPUT_STEREO_EYE_INDEX);

	// Pass through the 32 bit texture coordinate
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(TexCoord);

	// Calculate the tangent space to view space tangent, binormal and normal
	// - 16 bit QTangent basing on http://dev.theomader.com/qtangents/ "QTangents" which is basing on
	//   http://www.crytek.com/cryengine/presentations/spherical-skinning-with-dual-quaternions-and-qtangents "Spherical Skinning with Dual-Quaternions and QTangents"
	float4 objectSpaceToViewSpaceQuaternion = MultiplyQuaternions(PassData.WorldSpaceToViewSpaceQuaternion[MAIN_INPUT_STEREO_EYE_INDEX], rotationQuaternion);
	float3x3 tangentFrame = GetTangentFrame(objectSpaceToViewSpaceQuaternion, float4(MAIN_INPUT(QTangent)) / 32767.0f);
	@property(UseGpuSkinning)
	{
		float3x3 normalMatrix = ROW_MATRIX_3x3(gpuSkinningMatrix[0].xyz, gpuSkinningMatrix[1].xyz, gpuSkinningMatrix[2].xyz);
		tangentFrame[0] = MATRIX_MUL(normalMatrix, tangentFrame[0]);
		tangentFrame[1] = MATRIX_MUL(normalMatrix, tangentFrame[1]);
		tangentFrame[2] = MATRIX_MUL(normalMatrix, tangentFrame[2]);
	}
	@end
	MAIN_OUTPUT(TangentFrame0VS) = tangentFrame[0];
	MAIN_OUTPUT(TangentFrame1VS) = tangentFrame[1];
	MAIN_OUTPUT(TangentFrame2VS) = tangentFrame[2];
MAIN_END_VERTEX(MAIN_OUTPUT_POSITION)
