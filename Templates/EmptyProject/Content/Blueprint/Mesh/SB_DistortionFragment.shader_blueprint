// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Define pieces                                         ]
//[-------------------------------------------------------]
// TODO(co) Define this outside
@piece(MaximumNumberOfMaterials)2@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	NOINTERPOLATION_INTERPOLATION_MODIFIER INPUT_TEXTURE_COORDINATE(1, uint,   MaterialSlotVS, 	 	0)	// The assigned material slot inside the material uniform buffer
										   INPUT_TEXTURE_COORDINATE(2, float3, TexCoordDepthVS,	 	1)	// Texture coordinate, z = linear mesh depth
										   INPUT_TEXTURE_COORDINATE(3, float3, TangentFrame0VS,	 	2)	// Tangent frame
										   INPUT_TEXTURE_COORDINATE(4, float3, TangentFrame1VS,	 	3)	// Tangent frame
										   INPUT_TEXTURE_COORDINATE(5, float3, TangentFrame2VS,	 	4)	// Tangent frame
										   INPUT_TEXTURE_COORDINATE(6, float3, ViewSpacePositionVS, 5)	// View space position
										   DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)	// rg = xy distortion
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToClipSpaceMatrix[2];
	float4x4 WorldSpaceToViewSpaceMatrix;
	float4	 WorldSpaceToViewSpaceQuaternion;
	float2   InverseViewportSize;
	float2   ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END
struct Material
{
	float AlphaReference;
	float DistortionScale;
};
UNIFORM_BUFFER_BEGIN(1, 0, MaterialUniformBuffer, 1)
	Material Materials[FAST_SHADER_BUILD_HACK(@insertpiece(MaximumNumberOfMaterials))];
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(3, 0, _argb_nxa, 1)		// RGB channel = Albedo map ("_a"-postfix), A channel = x component of normal map ("_n"-postfix)
TEXTURE_2D(3, 1, _hr_rg_mb_nya, 2)	// R channel = Height map ("_h"-postfix), G channel = Roughness map ("_r"-postfix), B channel = Metallic map ("_m"-postfix), A channel = y component of normal map ("_n"-postfix)
@property(UseAlphaMap)
	TEXTURE_2D(3, 2, AlphaMap, 3)
@end
TEXTURE_2D(3, 3, DepthMap, 4)

// Samplers
SAMPLER_STATE(4, 0, SamplerLinear, 0)
SAMPLER_STATE(4, 1, SamplerPointClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Normal.asset)
	@insertpiece(DefineGetTangentFrame)
	@insertpiece(DefineUnpackTextureNormalXY)
@includepiece(../Shared/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepth)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the used material
	Material material = Materials[MAIN_INPUT(MaterialSlotVS)];

	// Perform alpha map based fragment rejection
	@property(UseAlphaMap)
		FLATTEN if (material.AlphaReference >= SAMPLE_2D(AlphaMap, SamplerLinear, MAIN_INPUT(TexCoordDepthVS).xy).r)
		{
			discard;	// Performance impact: This disables early-Z and hi-Z
		}
	@end

	// Read channel packed texture data
	// -> "_argb_nxa" = RGB channel = Albedo map ("_a"-postfix), A channel = x component of normal map ("_n"-postfix)
	// -> "_hr_rg_mb_nya" = R channel = Height map ("_h"-postfix), G channel = Roughness map ("_r"-postfix), B channel = Metallic map ("_m"-postfix), A channel = y component of normal map ("_n"-postfix)
	float4 value_argb_nxa = SAMPLE_2D(_argb_nxa, SamplerLinear, MAIN_INPUT(TexCoordDepthVS).xy);
	float4 value_hr_rg_mb_nya = SAMPLE_2D(_hr_rg_mb_nya, SamplerLinear, MAIN_INPUT(TexCoordDepthVS).xy);

	// Transform the tangent space normal into view space
	float3 viewSpaceNormal = UnpackTextureNormalXY(value_argb_nxa.a, value_hr_rg_mb_nya.a);
	viewSpaceNormal = normalize(viewSpaceNormal.x * MAIN_INPUT(TangentFrame0VS) + viewSpaceNormal.y * MAIN_INPUT(TangentFrame1VS) + viewSpaceNormal.z * MAIN_INPUT(TangentFrame2VS));

	// Get distortion which later on is used for simple perturbation as described at "GPU Gems 2"-book, "Chapter 19. Generic Refraction Simulation"-chapter by Tiago Sousa
	float2 distortion = viewSpaceNormal.xy;

	// Scale distortion
	distortion.xy *= material.DistortionScale;

	{ // Do only apply distortion behind, not in front (< instead of > due to usage of Reversed-Z)
		float4 texCoord = float4((FRAGMENT_POSITION.xy + distortion.xy) * PassData.InverseViewportSize, 0.0f, 0.0f);
		float targetSceneDepth = GetLinearDepth(SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, texCoord));
		FLATTEN if (targetSceneDepth < MAIN_INPUT(TexCoordDepthVS).z)
		{
			discard;	// Performance impact: This disables early-Z and hi-Z
		}
	}

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(distortion.xy, 0.0f, 1.0f);
MAIN_END
