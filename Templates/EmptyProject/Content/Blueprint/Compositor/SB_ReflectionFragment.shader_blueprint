// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4 ViewSpaceFrustumCorners[4];
	float4 ViewSpaceToWorldSpaceQuaternion;
	float2 ViewportSize;
	float2 ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, DepthMap, 0)
TEXTURE_2D(1, 1, SpecularMap, 1)	// rgb = specular color, a = roughness
TEXTURE_2D(1, 2, NormalMap, 2)		// rgb = view space normal
TEXTURE_CUBE(1, 3, ReflectionCubeMap, 3)
@property(UseScreenSpaceReflectionMap)
	TEXTURE_2D(1, 4, ScreenSpaceReflectionMap, 4)
	TEXTURE_2D(1, 5, PreviousColorMap, 5)
	TEXTURE_2D(1, 6, VelocityMap, 6)
@end

// Samplers
SAMPLER_STATE(2, 0, SamplerPointClamp, 0)
SAMPLER_STATE(2, 1, SamplerLinear, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepth)
@includepiece(../Shared/SP_Normal.asset)
	@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get depth and normal of the fragment
	float2 texCoord = MAIN_INPUT(TexCoordVS);
	int3 sampleCoord = int3(texCoord * PassData.ViewportSize, 0);
	float depth = SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, float4(texCoord, 0.0f, 0.0f));
	float3 viewSpaceNormal = TEXTURE_FETCH_2D(NormalMap, sampleCoord).rgb;
	float roughness = TEXTURE_FETCH_2D(SpecularMap, sampleCoord).a;

	// Get the normalized view ray
	float3 viewRay = normalize(MAIN_INPUT(ViewRayVS));

	// Scale the view ray by the ratio of the linear z value to the projected view ray
	// -> For details see "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
	float linearDepth = GetLinearDepth(depth) / dot(float3(0.0f, 0.0f, 1.0f), viewRay);
	float3 viewSpacePosition = viewRay * linearDepth;

	// Derive data
	float3 viewSpaceIncident = normalize(viewSpacePosition);	// In view space, the camera is at the origin
	float3 worldSpaceIncident = MultiplyQuaternionVector(PassData.ViewSpaceToWorldSpaceQuaternion, viewSpaceIncident);
	float3 worldSpaceNormal = MultiplyQuaternionVector(PassData.ViewSpaceToWorldSpaceQuaternion, viewSpaceNormal);

	// Fetch the screen space reflection color
	@property(UseScreenSpaceReflectionMap)
		float3 screenSpaceReflectionValue = SAMPLE_2D_LOD(ScreenSpaceReflectionMap, SamplerLinear, float4(texCoord, 0.0f, 0.0f)).rgb;
		float2 hitPixel = screenSpaceReflectionValue.xy;

		// Temporal reprojection: We're using color data from the previous frame for the screen space reflection color. In order to
		// hide that the reflections lag one frame behind we're reprojecting the hit pixel basing on previous camera related data.
		hitPixel.xy -= TEXTURE_FETCH_2D(VelocityMap, int3(hitPixel.xy * PassData.ViewportSize, 0)).xy;

		float3 reflectionColor = SAMPLE_2D_LOD(PreviousColorMap, SamplerLinear, float4(hitPixel.xy, 0.0f, 0.0f)).rgb;
	@end

	// Calculate cube reflection color
	float3 cubeReflectionColor;
	{
		// Select mip level based on roughness
		float3 R = reflect(worldSpaceIncident, worldSpaceNormal);
		float2 cubeDimension = CAST_TO(GET_TEXTURE_CUBE_LOD_SIZE(ReflectionCubeMap, 0), float2);
		float numberOfCubeMipmaps = log2(max(cubeDimension.x, cubeDimension.y));
		cubeReflectionColor = SAMPLE_CUBE_LOD(ReflectionCubeMap, SamplerLinear, float4(R, roughness * numberOfCubeMipmaps)).rgb;

		// Image quality improvement via "Horizon Occlusion for Normal Mapped Reflections" ( http://marmosetco.tumblr.com/post/81245981087 )
		float horizonFade = 1.3f;
		float horizon = SATURATE(1.0f + horizonFade * dot(R, worldSpaceNormal));
		horizon *= horizon;
		cubeReflectionColor *= horizon;
	}

	// Done
	@property(UseScreenSpaceReflectionMap)	
		// Mix screen space reflection (SSR) and cube map reflection color
		MAIN_OUTPUT_COLOR(0) = float4(LERP(cubeReflectionColor, reflectionColor, screenSpaceReflectionValue.z), 0.0f);
	@else
		MAIN_OUTPUT_COLOR(0) = float4(cubeReflectionColor, 0.0f);
	@end
MAIN_END
