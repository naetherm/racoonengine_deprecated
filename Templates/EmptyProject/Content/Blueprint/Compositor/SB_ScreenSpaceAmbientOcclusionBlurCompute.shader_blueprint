// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_GLOBAL_INVOCATION_ID
INPUT_END

// Uniform buffers
struct PassDataStruct
{
	uint3 GlobalComputeSize;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ScreenSpaceAmbientOcclusionMap, 0)
RW_TEXTURE_2D(1, 1, OutputTexture2D, 1, r32f, writeonly)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_COMPUTE(32, 32, 1)
	// Compute dispatch is using groups of a multiple of the local size, ensure we don't access out of global compute size which mustn't be a multiple of the local size and hence might be smaller
	// -> Basing on "SSAO Tutorial" from John Chapman http://john-chapman-graphics.blogspot.de/2013/01/ssao-tutorial.html
	BRANCH if (GLOBAL_INVOCATION_ID.x < PassData.GlobalComputeSize.x && GLOBAL_INVOCATION_ID.y < PassData.GlobalComputeSize.y)
	{
		int BLUR_SIZE = 4;

		// Blur
		float sum = 0.0f;
		float2 hlim = float2(float(-BLUR_SIZE) * 0.5f + 0.5f, float(-BLUR_SIZE) * 0.5f + 0.5f) + float2(0.5f, 0.5f);
		float2 inverseGlobalComputeSize = float2(1.0f, 1.0f) / CAST_TO(PassData.GlobalComputeSize.xy, float2);
		float2 texCoord = (CAST_TO(GLOBAL_INVOCATION_ID.xy, float2) + float2(0.5f, 0.5f)) * inverseGlobalComputeSize;
		UNROLL for (int x = 0; x < BLUR_SIZE; ++x)
		{
			UNROLL for (int y = 0; y < BLUR_SIZE; ++y)
			{
				float2 offset = (hlim + float2(float(x), float(y))) * inverseGlobalComputeSize;
				sum += SAMPLE_2D_LOD(ScreenSpaceAmbientOcclusionMap, SamplerLinear, float4(texCoord + offset, 0.0f, 0.0f)).r;
			}
		}
		float value = sum / float(BLUR_SIZE * BLUR_SIZE);

		// Done
		IMAGE_STORE(OutputTexture2D, CAST_TO(GLOBAL_INVOCATION_ID.xy, int2), float4(value, value, value, value));
	}
MAIN_END_NO_OUTPUT
