// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4   ViewSpaceFrustumCorners[4];
	float4x4 ViewSpaceToWorldSpaceMatrix;
	float4x4 ShadowMatrix;
	float4   ShadowCascadeOffsets[4];
	float4   ShadowCascadeScales[4];
	float4   ShadowCascadeSplits;
	float4	 WetSurfaces;	// x=wet level, y=hole/cracks flood level, z=puddle flood level, w=rain intensity
	float3	 WrappedWorldSpaceCameraPosition;
	float3   ViewSpaceSunlightDirection;
	float3   AmbientColor;
	float    AtmosphereFogDensity;
	float4   ViewSpaceToWorldSpaceQuaternion;
	float4	 WorldSpaceToViewSpaceQuaternion;
	float3   SunlightColor;
	float    GlobalTimeInSeconds;
	float3   DiffuseFogColor;
	float3   LightClustersScale;
	float3   LightClustersBias;
	float2   ViewportSize;
	float2   ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(1, 0, float4, LightTextureBuffer, 0)	// "LIGHT"

// Textures
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(2, 0, GBufferMap0, @value(NumberOfMultisamples), 1)	// GBuffer 0: rgb = albedo color, a = alpha unused (required for blend operations)
	TEXTURE_2D_MS(2, 1, GBufferMap1, @value(NumberOfMultisamples), 2)	// GBuffer 1: rgb = view space normal, a = roughness
	TEXTURE_2D_MS(2, 2, GBufferMap2, @value(NumberOfMultisamples), 3)	// GBuffer 2: rgb = emissive color, a = metallic
	TEXTURE_2D_MS(2, 3, DepthMap, @value(NumberOfMultisamples), 4)
@else
	TEXTURE_2D(2, 0, GBufferMap0, 1)	// GBuffer 0: rgb = albedo color, a = alpha unused (required for blend operations)
	TEXTURE_2D(2, 1, GBufferMap1, 2)	// GBuffer 1: rgb = view space normal, a = roughness
	TEXTURE_2D(2, 2, GBufferMap2, 3)	// GBuffer 2: rgb = emissive color, a = metallic
	TEXTURE_2D(2, 3, DepthMap, 4)
@end
@property(ReceiveShadows)
	TEXTURE_2D_ARRAY(2, 4, ShadowMap, 5)
@end
TEXTURE_2D(2, 5, ScreenSpaceAmbientOcclusionMap, 6)
TEXTURE_2D(2, 6, VolumetricLightMap, 7)
TEXTURE_2D(2, 7, ReflectionMap, 8)
TEXTURE_3D_UINT(2, 8, LightClustersMap3D, 9)
TEXTURE_1D_ARRAY(2, 9, IesLightProfileMap, 10)
@property(UseWetSurfaces)
	TEXTURE_2D(2, 10, WaterRipplesMap, 11)	// r = droplet mask, gb = ripples xy normal map, a = random grey value constant
	TEXTURE_2D(2, 11, WaterStreaksMap, 12)	// r = streak pattern, g = gradient, ba = streak xy normal map
@end

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Color.asset)
	@insertpiece(DefineCalculateFoggedColor)
@includepiece(../Shared/SP_Normal.asset)
	@insertpiece(DefineGetTangentFrame)
	@insertpiece(DefineUnpackTextureNormalXY)
	@insertpiece(DefineCalculateCotangentFrame)
@includepiece(../Shared/SP_PhysicallyBasedShading.asset)
	@property(HighQualityLighting)
		@insertpiece(DefinePhysicallyBasedShading)
	@else
		@insertpiece(DefineBlinnPhongBasedShading)
	@end
@includepiece(../Shared/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepth)
@property(ReceiveShadows)
	@includepiece(../Shared/SP_ExponentialShadow.asset)
		@insertpiece(DefineExponentialShadow)
	@includepiece(../Shared/SP_Shadow.asset)
		@insertpiece(DefineCalculateShadowVisibility)
		@insertpiece(DefineShadowDebugging)
@end
@includepiece(../Shared/SP_Noise.asset)
	@insertpiece(DefineMultipleOctavesNoise3D)
@property(UseWetSurfaces)
	@includepiece(../Shared/SP_WetSurfaces.asset)
		@insertpiece(DefineWetSurfaces)
@end

float3 CalculateColorByGBuffer(float2 texCoord, float3 viewRay, float4 gbuffer0Value, float4 gbuffer1Value, float4 gbuffer2Value, float depth, float screenSpaceAmbientOcclusion, float3 volumetricLight, float3 reflectionColor)
{
	// Gather GBuffer data
	float3 albedo		   = gbuffer0Value.rgb;
	float3 viewSpaceNormal = gbuffer1Value.rgb;
	float  roughness	   = gbuffer1Value.a;
	float3 emissive		   = gbuffer2Value.rgb;
	float  metallic		   = gbuffer2Value.a;

	// Scale the view ray by the ratio of the linear z value to the projected view ray
	// -> For details see "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
	float linearDepth = GetLinearDepth(depth) / dot(float3(0.0f, 0.0f, 1.0f), viewRay);
	float3 viewSpacePosition = viewRay * linearDepth;

	// Shadow mapping
	float3 worldSpacePosition = MATRIX_MUL(PassData.ViewSpaceToWorldSpaceMatrix, float4(viewSpacePosition.xyz, 1.0f)).xyz;
	float shadowVisibility = 1.0f;
	@property(ReceiveShadows)
		shadowVisibility = CalculateShadowVisibility(worldSpacePosition, linearDepth);
	@end

	// Derive data
	float3 viewSpaceIncident = -normalize(viewSpacePosition);	// In view space, the camera is at the origin
	float3 worldSpaceIncident = MultiplyQuaternionVector(PassData.ViewSpaceToWorldSpaceQuaternion, viewSpaceIncident);
	float3 worldSpaceNormal = MultiplyQuaternionVector(PassData.ViewSpaceToWorldSpaceQuaternion, viewSpaceNormal);

	// Water influence on material BRDF
	// -> Wet surfaces parameter layout: x=wet level, y=hole/cracks flood level, z=puddle flood level, w=rain intensity
	float specularFactor = 1.0f;
	@property(UseWetSurfaces)
		BRANCH if (0.0f != PassData.WetSurfaces.x)
		{
			// Handle camera relative rendering
			float heightMapValue = 0.0f;	// TODO(co) Transport this information?
			float3 wrappedWorldSpacePosition = worldSpacePosition + PassData.WrappedWorldSpaceCameraPosition;
			float3x3 TBN = CalculateCotangentFrame(viewSpaceNormal, viewSpaceIncident, texCoord);	// We need the texture coordinates of the used real geometry and not of the screen space triangle, but since we don't have them let's just use what we've got
			specularFactor = DoWaterProcess(wrappedWorldSpacePosition, TBN, PassData.GlobalTimeInSeconds, PassData.WorldSpaceToViewSpaceQuaternion, shadowVisibility, heightMapValue, multipleOctavesNoise3D(wrappedWorldSpacePosition), PassData.WetSurfaces.x, PassData.WetSurfaces.y, PassData.WetSurfaces.z, PassData.WetSurfaces.w, albedo, roughness, metallic, viewSpaceNormal);
		}
	@end

	// Ambient term
	float3 color = albedo * (PassData.AmbientColor.rgb + CalculateHemisphereLighting(worldSpaceNormal.xyz, PassData.AmbientColor.rgb * 0.7f, PassData.AmbientColor.rgb * 0.2f));

	// Directional sunlight, our primary light
	BRANCH if (shadowVisibility > 0.0f)
	{
		color += shadowVisibility * CalculateLighting(albedo, roughness, metallic, viewSpaceNormal, viewSpaceIncident, PassData.ViewSpaceSunlightDirection, PassData.SunlightColor);
	}

	// Perform clustered shading
	@insertpiece(PerformClusteredShading)

	// Apply reflection color
	color = LERP(color, reflectionColor, specularFactor * ALBEDO_METALLIC_TO_SPECULAR(albedo, metallic));

	// Apply screen space ambient occlusion
	color *= float3(screenSpaceAmbientOcclusion, screenSpaceAmbientOcclusion, screenSpaceAmbientOcclusion);

	// Emissive term
	color += emissive;

	// Apply fog
	color = CalculateFoggedColor(viewSpacePosition, color, PassData.AtmosphereFogDensity, PassData.ViewSpaceSunlightDirection, PassData.AmbientColor, PassData.SunlightColor, PassData.DiffuseFogColor);

	// Apply volumetric light
	color += volumetricLight;

	// Don't remove the following commented code: Shadow map debugging
	// @property(ReceiveShadows)
	// color *= GetShadowCascadeColor(linearDepth);
	// @end

	// Done
	return color;
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the normalized view ray
	float3 viewRay = normalize(MAIN_INPUT(ViewRayVS));

	// Get texture coordinate
	float2 texCoord = MAIN_INPUT(TexCoordVS);
	int2 textureCoordinate = int2(texCoord * PassData.ViewportSize);

	// Gather screen space ambient occlusion value
	float screenSpaceAmbientOcclusion = TEXTURE_FETCH_2D(ScreenSpaceAmbientOcclusionMap, int3(textureCoordinate, 0)).r;

	// Gather volumetric light value
	float3 volumetricLight = SAMPLE_2D_LOD(VolumetricLightMap, SamplerLinear, float4(texCoord, 0.0f, 0.0f)).rgb;

	// Gather reflection color value
	float3 reflectionColor = TEXTURE_FETCH_2D(ReflectionMap, int3(textureCoordinate, 0)).rgb;

	// Calculate color by GBuffer
	float3 color = float3(0.0f, 0.0f, 0.0f);
	@property(NumberOfMultisamples)
		// Custom MSAA resolve
		@foreach(NumberOfMultisamples, i, 0)
		{
			// Read GBuffer data
			float4 gbuffer0Value = SAMPLE_2D_MS(GBufferMap0, textureCoordinate, @i);

			// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
			float depth = SAMPLE_DEPTH_2D_MS(DepthMap, textureCoordinate, @i);
			BRANCH if (1.0f != depth)
			{
				// Read GBuffer data
				float4 gbuffer1Value = SAMPLE_2D_MS(GBufferMap1, textureCoordinate, @i);
				float4 gbuffer2Value = SAMPLE_2D_MS(GBufferMap2, textureCoordinate, @i);

				// Calculate color by GBuffer
				color += CalculateColorByGBuffer(texCoord, viewRay, gbuffer0Value, gbuffer1Value, gbuffer2Value, depth, screenSpaceAmbientOcclusion, volumetricLight, reflectionColor);
			}
			else
			{
				// Sky
				color += gbuffer0Value.rgb;
			}
		}
		@end
		color /= @value(NumberOfMultisamples);
	@else
		// Read GBuffer data
		float4 gbuffer0Value = TEXTURE_FETCH_2D(GBufferMap0, int3(textureCoordinate, 0));

		// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
		float depth = REVERSED_Z(TEXTURE_FETCH_2D(DepthMap, int3(textureCoordinate, 0)).r);
		BRANCH if (1.0f != depth)
		{
			// Read GBuffer data
			float4 gbuffer1Value = TEXTURE_FETCH_2D(GBufferMap1, int3(textureCoordinate, 0));
			float4 gbuffer2Value = TEXTURE_FETCH_2D(GBufferMap2, int3(textureCoordinate, 0));

			// Calculate color by GBuffer
			color = CalculateColorByGBuffer(texCoord, viewRay, gbuffer0Value, gbuffer1Value, gbuffer2Value, depth, screenSpaceAmbientOcclusion, volumetricLight, reflectionColor);
		}
		else
		{
			// Sky
			color = gbuffer0Value.rgb;
		}
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(color, 1.0f);
MAIN_END
