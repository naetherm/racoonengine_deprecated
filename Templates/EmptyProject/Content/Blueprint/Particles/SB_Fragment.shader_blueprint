// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float3, TexCoordDepthVS, 0)	// xy = texture coordinate, z = linear particle depth
	INPUT_TEXTURE_COORDINATE(2, float4, ColorVS, 1)			// Color
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)	// rgb = albedo color, a = alpha
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToViewSpaceMatrix[2];
	float4x4 ViewSpaceToClipSpaceMatrix[2];
	float2   InverseViewportSize;
	float2	 ProjectionParameters;
	float    GlobalTimeInSeconds;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures: We need to start at texture unit 1 instead of texture unit 0 because the vertex shader has an instance structured buffer bound at texture unit 0 (OpenGL shares those bindings across all shader stages while Direct3D doesn't)
TEXTURE_2D(2, 1, _argb_alpha, 1)
@property(SoftParticles)
	TEXTURE_2D(2, 2, DepthMap, 2)
@end

// Samplers
SAMPLER_STATE(3, 0, SamplerLinear, 0)
@property(SoftParticles)
	SAMPLER_STATE(3, 1, SamplerPointClamp, 1)
@end


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@property(SoftParticles)
	@includepiece(../Shared/SP_Depth.asset)
		@insertpiece(DefineGetLinearDepth)
@end


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// TODO(co) Pass or material parameters
	float ContrastPower = 1.5f;

	// Fetch texel
	float4 color = SAMPLE_2D(_argb_alpha, SamplerLinear, MAIN_INPUT(TexCoordDepthVS).xy);

	// Apply particle color
	color *= MAIN_INPUT(ColorVS);

	// Soft particles function as described in "Soft Particles" by Tristan Lorach - https://developer.download.nvidia.com/whitepapers/2007/SDK10/SoftParticles_hi.pdf
	@property(SoftParticles)
	{ 
		float sceneDepth = GetLinearDepth(SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, float4(FRAGMENT_POSITION.xy * PassData.InverseViewportSize, 0.0f, 0.0f)));
		float depthDifference = sceneDepth - MAIN_INPUT(TexCoordDepthVS).z;
		float fade = 0.5f * pow(SATURATE(2.0f * ((depthDifference > 0.5f) ? 1.0f - depthDifference : depthDifference)), ContrastPower);
		fade = (depthDifference > 0.5f) ? (1.0f - fade) : fade;
		color.a *= fade;
	}
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = color;
MAIN_END
