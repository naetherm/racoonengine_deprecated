// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN_VERTEX
	INPUT_VERTEX_DRAW_ID(0)	// Draw ID
	INPUT_VERTEX_ID
	INPUT_INSTANCE_ID
INPUT_END_VERTEX
OUTPUT_BEGIN_VERTEX
	OUTPUT_TEXTURE_COORDINATE(1, float3, TexCoordDepthVS, 0)	// xy = texture coordinate, z = linear particle depth
	OUTPUT_TEXTURE_COORDINATE(2, float4, ColorVS, 		  1)	// Color
	OUTPUT_POSITION			 (0)								// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END_VERTEX

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToViewSpaceMatrix[2];
	float4x4 ViewSpaceToClipSpaceMatrix[2];
	float2   InverseViewportSize;
	float2	 ProjectionParameters;
	float    GlobalTimeInSeconds;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END
struct InstanceDataStruct
{
	float3 WorldPosition;
	uint   MaterialIndex;
};
UNIFORM_BUFFER_BEGIN(1, 0, InstanceUniformBuffer, 1)
	InstanceDataStruct InstanceDataArray[FAST_SHADER_BUILD_HACK(4096)];	// 64 KiB
UNIFORM_BUFFER_END

// Structured buffers
struct ParticleDataStruct
{
	float4 PositionSize;	// Object space particle xyz-position, w = particle size
	float4 Color;			// Linear space RGB particle color and opacity
};
STRUCTURED_BUFFER(2, 0, ParticleStructuredBuffer, 0, ParticleDataStruct, ParticleData)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_VERTEX
	// Six vertices per particle, particle index = instance index
	float3 VERTICES[6];
	VERTICES[0] = float3(-1.0f, -1.0f, 0.0f);	// 0
	VERTICES[1] = float3( 1.0f, -1.0f, 0.0f);	// 1
	VERTICES[2] = float3(-1.0f,  1.0f, 0.0f);	// 2
	VERTICES[3] = float3(-1.0f,  1.0f, 0.0f);	// 3
	VERTICES[4] = float3( 1.0f, -1.0f, 0.0f);	// 4
	VERTICES[5] = float3( 1.0f,  1.0f, 0.0f);	// 5

	// Get the particle data of the currently processed particle instance
	ParticleDataStruct particleDataStruct = STRUCTURED_BUFFER_GET(ParticleStructuredBuffer, ParticleData, MAIN_INPUT_INSTANCE_ID);

	// Get view space vertex position and texture coordinate
	float3 viewSpacePosition = VERTICES[MAIN_INPUT_VERTEX_ID];
	float2 uv = viewSpacePosition.xy * float2(0.5f, 0.5f) + float2(0.5f, 0.5f);

	{ // Rotate the billboard clockwise
		// TODO(co) Just a test, later on controlled by particle data
		float particleRotation = PassData.GlobalTimeInSeconds;

		float2x2 rotationMatrix = ROW_MATRIX_2x2(float2(cos(particleRotation), -sin(particleRotation)),
												 float2(sin(particleRotation),  cos(particleRotation)));
		viewSpacePosition.xy = MATRIX_MUL(viewSpacePosition.xy, rotationMatrix);
	}

	// Scale the billboard
	viewSpacePosition *= particleDataStruct.PositionSize.w;

	// Get object space to world space position
	// -> Since the draw ID is automatically increased with each instance we need to compensate
	float3 position = InstanceDataArray[MAIN_INPUT_DRAW_ID_VERTEX - MAIN_INPUT_INSTANCE_ID].WorldPosition;

	// Transform the billboard to clip-space
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToViewSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float4(particleDataStruct.PositionSize.xyz + position, 1.0f));
	MAIN_OUTPUT_POSITION.xyz += viewSpacePosition;
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.ViewSpaceToClipSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], MAIN_OUTPUT_POSITION);

	// Pass through the texture coordinate, color and clip space position
	MAIN_OUTPUT(TexCoordDepthVS) = float3(uv, MAIN_OUTPUT_POSITION.w);
	MAIN_OUTPUT(ColorVS) = particleDataStruct.Color;
MAIN_END_VERTEX(MAIN_OUTPUT_POSITION)
