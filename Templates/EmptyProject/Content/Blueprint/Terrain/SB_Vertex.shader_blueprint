// Copyright (c) 2019 - 2022 RacoonStudios

// This software contains source code provided by NVIDIA Corporation. The height map terrain tessellation implementation is basing on "DirectX 11 Terrain Tessellation" by Iain Cantlay ( https://developer.nvidia.com/sites/default/files/akamai/gamedev/files/sdk/11/TerrainTessellation_WhitePaper.pdf ) and the concrete implementation "TerrainTessellation"-sample inside "NVIDIA Direct3D SDK 11" ( https://developer.nvidia.com/dx11-samples ).


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(./SP_Terrain.asset)
	@insertpiece(DefineTerrainPassDataStruct)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN_VERTEX
	INPUT_VERTEX_ID
	INPUT_VERTEX_POSITION	(0, float3, Position)		// xy = object space vertex position, z = tile size
	INPUT_TEXTURE_COORDINATE(1, float4, Adjacency, 0)	// These are the size of the neighbours along +/- x or y axes. For interior tiles this is 1. For edge tiles it is 0.5 or 2.0. x = neighbour minus x, y = neighbour minus y, z = neighbour plus x, w = neighbour plus y.
INPUT_END_VERTEX
OUTPUT_BEGIN_VERTEX
	OUTPUT_POSITION_NAMED	 (0, float4, PositionVS)		// World space control point position of the patch
	OUTPUT_TEXTURE_COORDINATE(1, float4, AdjacencyVS, 0)	// These are the size of the neighbours along +/- x or y axes. For interior tiles this is 1. For edge tiles it is 0.5 or 2.0. x = neighbour minus x, y = neighbour minus y, z = neighbour plus x, w = neighbour plus y.
OUTPUT_END_VERTEX

// Uniform buffers
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	TerrainPassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(2, 0, HeightMap, 1)

// Samplers
SAMPLER_STATE(3, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
// From shader piece "./SP_Terrain.asset"
	@insertpiece(DefineWorldXZToHeightUV)
	@insertpiece(DefineSampleHeightMap)

void ReconstructPosition(uint vertexId, float3 vertexPosition, out float3 position)
{
	float iv = floor(vertexId * TERRAIN_RECIP_CONTROL_VTX_PER_TILE_EDGE);
	float iu = vertexId - iv * TERRAIN_CONTROL_VTX_PER_TILE_EDGE;
	float u = iu / (TERRAIN_CONTROL_VTX_PER_TILE_EDGE - 1.0f);
	float v = iv / (TERRAIN_CONTROL_VTX_PER_TILE_EDGE - 1.0f);

	// Shrink tiles slightly to show gaps between them
	float size = vertexPosition.z;

	// Terrain mesh world space size [-8,8]
	position = float3(u * size + vertexPosition.x, 0.0f, v * size + vertexPosition.y);

	// [-8,8] -> [0.5,0.5]
	position /= 16.0f;

	// [0.5,0.5] -> [PassData.WorldSize/2,PassData.WorldSize/2]
	position *= PassData.WorldSize;

	{ // Bias the terrain mesh position
		// -> The camera is always at the best tessellated center
		// -> Don't bias the terrain contentiously or there's a constant minor wobbling as the terrain mesh slides over the height map
		// TODO(co) Move parts to the CPU
		float tileSize = 0.125f;
		float3 SNAP_GRID_SIZE = PassData.WorldSize * tileSize / TERRAIN_PATCHES_PER_TILE_EDGE;
		float3 snapPosition;
		snapPosition.x = floor(PassData.UnmodifiedWorldSpaceCameraPosition.x / SNAP_GRID_SIZE.x) * SNAP_GRID_SIZE.x;
		snapPosition.z = floor(PassData.UnmodifiedWorldSpaceCameraPosition.z / SNAP_GRID_SIZE.z) * SNAP_GRID_SIZE.z;
		position.xz += snapPosition.xz;
	}
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_VERTEX
	float3 worldSpacePosition;
	ReconstructPosition(MAIN_INPUT_VERTEX_ID, MAIN_INPUT(Position), worldSpacePosition);
	worldSpacePosition.y = SampleHeightMap(worldSpacePosition.xz);
	MAIN_OUTPUT(PositionVS) = float4(worldSpacePosition, 0.0f);
	MAIN_OUTPUT(AdjacencyVS) = MAIN_INPUT(Adjacency);
MAIN_END_VERTEX(MAIN_OUTPUT(PositionVS))
