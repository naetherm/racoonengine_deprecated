// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
// Approximate luminance from a RGB value
@piece(DefineColorToLuminance)
	float ColorToLuminance(float3 color)
	{
		return max(dot(color, float3(0.299f, 0.587f, 0.114f)), 0.0001f);
	}
@end

// Color blending using the formula "19.6.12. Overlay" for overlay blending from http://www.yaldex.com/open-gl/ch19lev1sec6.html
@piece(DefineOverlayColorBlending)
	float3 OverlayColorBlending(float3 rgb1, float3 rgb2)
	{
		float luminance = max(dot(rgb1, float3(0.299f, 0.587f, 0.114f)), 0.0001f);	// Same as "ColorToLuminance()" function
		if (luminance < 0.5f)
		{
			return 2.0f * rgb1 * rgb2;
		}
		else if (luminance > 0.5f)
		{
			return float3(1.0f, 1.0f, 1.0f) - 2.0f * (float3(1.0f, 1.0f, 1.0f) - rgb1) * (float3(1.0f, 1.0f, 1.0f) - rgb2);
		}
		else
		{
			float3 result1 = 2.0f * rgb1 * rgb2;
			float3 result2 = float3(1.0f, 1.0f, 1.0f) - 2.0f * (float3(1.0f, 1.0f, 1.0f) - rgb1) * (float3(1.0f, 1.0f, 1.0f) - rgb2);
			return LERP(result1, result2, SATURATE((luminance - 0.5f) * 10.0f));
		}
	}
@end

// Determine the color based on exposure settings
@piece(DefineCalculateExposedColor)
	float3 CalculateExposedColor(float3 color, float averageLuminance, float toneMapKeyValue, float threshold, out float exposure)
	{
		// Use geometric mean
		averageLuminance = clamp(averageLuminance, 0.125f, 4.0f);
		float linearExposure = (toneMapKeyValue / averageLuminance);
		exposure = log2(max(linearExposure, 0.0001f));
		exposure -= threshold;
		return exp2(exposure) * color;
	}
@end

// RGB color linear space to gamma space (sRGB = standard RGB = gamma of 2.2)
@piece(DefineLinearSpaceToGammaSpace3)
	float3 LinearSpaceToGammaSpace3(float3 color)
	{
		return SATURATE(pow(abs(color), float3(1.0f / 2.2f, 1.0f / 2.2f, 1.0f / 2.2f)));
	}
@end

// Gamma space (sRGB = standard RGB = gamma of 2.2) to RGB color linear space
@piece(DefineGammaSpaceToLinearSpace3)
	float3 GammaSpaceToLinearSpace3(float3 color)
	{
		return pow(abs(color), float3(2.2f, 2.2f, 2.2f));
	}
@end

@piece(DefineFilmGrain)
	// The implementation is basing on https://github.com/thefranke/dirtchamber/blob/master/shader/pp_film_grain.hlsl
	float3 ApplyFilmGrain(float3 color, float2 uv, float intensity, float globalTimeInSeconds)
	{
		// Calculate the grain
		float grain = 0.0f;
		{
			float l = ColorToLuminance(color);

			// Add noise
			float x = uv.x * uv.y * globalTimeInSeconds * 1000.0f;
			x = fmod(x, 13.0f) * fmod(x, 123.0f);
			float dx = fmod(x, 0.01f);
			float y = clamp(0.1f + dx * 100.0f, 0.0f, 1.0f) * intensity;
			float r = 0.5f * intensity - y;

			grain = 1.0f + r;
		}

		// Done
		return color * grain;
	}
@end

@piece(DefineChromaticAberrationEffect)
	// Basing on https://github.com/spite/Wagner/blob/master/fragment-shaders/chromatic-aberration-fs.glsl
	float2 ChromaticAberrationBarrelDistortion(float2 coord, float amt, float ditherValue)
	{
		float2 cc = coord - 0.5f;
		float dist = dot(cc, cc);
		float2 factor = cc * dist * amt;
		return SATURATE(coord + factor + factor * ditherValue);
	}

	float ChromaticAberrationLinterp(float t)
	{
		return SATURATE(1.0f - abs(2.0f * t - 1.0f));
	}

	float ChromaticAberrationRemap(float t, float a, float b)
	{
		return SATURATE((t - a) / (b - a));
	}

	float4 ChromaticAberrationSpectrumOffset(float t)
	{
		float lo = step(t, 0.5f);
		float hi = 1.0f - lo;
		float w = ChromaticAberrationLinterp(ChromaticAberrationRemap(t, 1.0f / 6.0f, 5.0f / 6.0f));
		float4 ret = float4(lo, 1.0f, hi, 1.0f) * float4(1.0f - w, w, 1.0f - w, 1.0f);
		return pow(abs(ret), float4(1.0f / 2.2f, 1.0f / 2.2f, 1.0f / 2.2f, 1.0f / 2.2f));
	}
@end

@piece(ApplyChromaticAberration)
{
	// Basing on https://github.com/spite/Wagner/blob/master/fragment-shaders/chromatic-aberration-fs.glsl

	// Dither using a Bayer matrix to hide banding artefacts when using not enough samples
	float ditherValue = GetBayerScreenSpaceDitherValue(CAST_TO(MAIN_INPUT(TexCoordVS) * CAST_TO(GET_TEXTURE_2D_LOD_SIZE(ColorMap, 0), float2), uint2));

	// Chromatic aberration
	float4 colorSum = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float4 weightSum = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float stepSize = 1.0f / float(PassData.ChromaticAberrationIterations);
	LOOP for (int i = 0; i < PassData.ChromaticAberrationIterations; ++i)
	{
		float t = float(i) * stepSize;
		float4 w = ChromaticAberrationSpectrumOffset(t);
		weightSum += w;
		colorSum += w * SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(ChromaticAberrationBarrelDistortion(MAIN_INPUT(TexCoordVS), 0.6f * PassData.ChromaticAberrationMaximumDistort * t, ditherValue), 0.0f, 0.0f));
	}
	color = colorSum / weightSum;
}
@end

@piece(DefineScreenSpaceDither)
	// Iestyn's RGB dither (7 asm instructions) from Portal2 X360, slightly modified for VR
	// -> See "Iestyn's RGB dither" - https://www.shadertoy.com/view/MtBGDD
	// -> See "Advanced VR Rendering" - http://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf - page 49
	// -> "Valve's screen space dither" https://www.shadertoy.com/view/4dcSRX - shows the effect nicely
	// -> For an overview of other alternatives see "Tech Note: Shader Snippets for Efficient 2D Dithering" by Martin Mittring 20. August 2018 ( https://developer.oculus.com/blog/tech-note-shader-snippets-for-efficient-2d-dithering/ )
	float3 ScreenSpaceDither(float2 screenPosition, float globalTimeInSeconds)
	{
		float ditherFactor = dot(float2(171.0f, 231.0f), screenPosition.xy + globalTimeInSeconds);
		float3 dither = float3(ditherFactor, ditherFactor, ditherFactor);
		dither.rgb = frac(dither.rgb / float3(103.0f, 71.0f, 97.0f)) - float3(0.5f, 0.5f, 0.5f);
		return (dither.rgb / 255.0f) * 0.375f;
	}
@end

@piece(DefineGetBayerScreenSpaceDitherValue)
	// Dither value using a Bayer matrix to hide banding artefacts when using not enough samples
	// -> Basing on "Volumetric lights" by Alexandre Pestana published on August 16, 2014 at http://www.alexandre-pestana.com/volumetric-lights/
	float GetBayerScreenSpaceDitherValue(uint2 screenSpacePosition)
	{
		float4x4 ditherPattern;
		ditherPattern[0] = float4(0.0f, 0.5f, 0.125f, 0.625f);
		ditherPattern[1] = float4(0.75f, 0.22f, 0.875f, 0.375f);
		ditherPattern[2] = float4(0.1875f, 0.6875f, 0.0625f, 0.5625f);
		ditherPattern[3] = float4(0.9375f, 0.4375f, 0.8125f, 0.3125f);
		return ditherPattern[screenSpacePosition.x % 4][screenSpacePosition.y % 4];
	}
@end

// Fog
@piece(DefineCalculateFoggedColor)
	float3 CalculateFoggedColor(float3 viewSpacePosition, float3 color, float atmosphereFogDensity, float3 viewSpaceSunlightDirection, float3 ambientColor, float3 sunlightColor, float3 diffuseFogColor)
	{
		// Traditional depth fog
		// -> Depth fog: Exponential^2 (see e.g. http://developer.download.nvidia.com/assets/gamedev/docs/Fog2.pdf?display=style-table )
		float factor = viewSpacePosition.z * atmosphereFogDensity;
		factor *= factor;
		float fogDepth = 1.0f - SATURATE(1.0f / exp(factor));

		// Fog lighting direction
		float3 viewSpaceCameraDirection = -normalize(viewSpacePosition);	// In view space, we always look along the positive z-axis
		float fogDirection = SATURATE(dot(viewSpaceCameraDirection, -viewSpaceSunlightDirection));
		fogDirection = pow(fogDirection, 15.0f);

		// Calculate fogged color
		// -> See e.g. "better fog" by Inigo Quilez published at http://www.iquilezles.org/www/articles/fog/fog.htm
		float3 ambientFogDiffuseColor = ambientColor * diffuseFogColor;
		float3 sunFogDiffuseColor = sunlightColor * diffuseFogColor;
		float3 litFog = LERP(ambientFogDiffuseColor, ambientFogDiffuseColor + sunFogDiffuseColor, fogDirection);
		return LERP(color, litFog, fogDepth);
	}
@end
