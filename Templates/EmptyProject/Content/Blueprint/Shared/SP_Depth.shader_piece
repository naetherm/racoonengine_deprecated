// Copyright (c) 2019 - 2022 RacoonStudios

//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@piece(DefineGetLinearDepth)
	/**
	*  @brief
	*    Depth to linear depth which is using 0=near and 1=far
	*/
	float GetLinearDepth(float depth)
	{
		return PassData.ProjectionParameters.y / (depth - PassData.ProjectionParameters.x);
	}
@end

@piece(DefineGetLinearDepthReversedZ)
	/**
	*  @brief
	*    Depth to linear depth, apply Reversed-Z to provided depth which is using 0=far and 1=near
	*
	*  @note
	*    - For background theory see "Depth Precision Visualized" by Nathan Reed - https://developer.nvidia.com/content/depth-precision-visualized
	*    - For practical information see "Reversed-Z in OpenGL" by Nicolas Guillemot - https://nlguillemot.wordpress.com/2016/12/07/reversed-z-in-opengl/
	*/
	float GetLinearDepthReversedZ(float depth)
	{
		@property(ZeroToOneClipZ)
			return PassData.ProjectionParametersReversedZ.y / (depth - PassData.ProjectionParametersReversedZ.x);
		@else
			// 0..1 -> -1..1
			return PassData.ProjectionParametersReversedZ.y / ((depth * 2.0f - 1.0f) - PassData.ProjectionParametersReversedZ.x);
		@end
	}
@end
